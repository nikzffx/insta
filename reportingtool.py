import os, sys, base64 as B
from requests import post,get
from rich.console import Console
import requests,os,re,uuid
import time
from colorist import Color
from colorist import red
from rich.text import Text
from datetime import datetime
from cfonts import render 
C=''
exec(B.b64decode(C).decode('utf-8'))
